import {memo} from "react";
import * as Yup from "yup";
import {useSnackbar} from "../components/snackbar/snackbar-provider.tsx";
import {SubmitHandler, useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import BasicModal from "../components/modal/modal.tsx";
import FormProvider, {ContTextField} from "../components/hook-form";
import Grid from "@mui/material/Grid2";
import {Button, Card, Stack} from "@mui/material";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";

const schema = Yup
  .object({
    name: Yup.string().required('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è!'),
    surname: Yup.string().required('–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é!'),
  })
  .required('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ!')

type FormData = Yup.InferType<typeof schema>

function RegisterModal({open, handleClose}:Props) {
  const {showSnackbar} = useSnackbar();

  const methods = useForm<FormData>(
    {
      defaultValues: {
        name: '',
        surname: '',
      },
      resolver: yupResolver(schema),
    });

  const {handleSubmit} = methods

  const onSubmit: SubmitHandler<any> = data => {
    console.log('data', data)
    showSnackbar(`${data.name} ${data.surname} - –ø–æ–≥–Ω–∞–ª–∏! ü§™`, "success");
    handleClose(data.name, data.surname)
  }

  return (
<BasicModal open={open}>
  <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
    <Grid container spacing={2}>
      <Card sx={{width: '90%', maxWidth: 400, p: 2}}>
        <Typography id="modal-modal-title" variant="h6" component="h2" sx={{textAlign: 'center'}}>
          –ù–∞–π–¥–∏ –≤—Å–µ—Ö –∫—Ä–æ–ª–∏–∫–æ–≤ üê∞
        </Typography>
        <Typography id="modal-modal-description" sx={{mt: 2, textAlign: 'center'}}>
          –ó–ê–î–ê–ù–ò–ï: –ù–∞–π—Ç–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫—Ä–æ–ª–∏–∫–æ–≤ üê∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ù–∞—à–µ–ª –∫—Ä–æ–ª–∏–∫–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –Ω–µ–≥–æ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
          –≤–≤–µ—Å—Ç–∏ –≤ –ø–æ–ª—è –Ω–∏–∂–µ —Å–≤–æ—ë –ò–ú–Ø –∏ –§–ê–ú–ò–õ–ò–Æ, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ò–ì–†–ê–¢–¨. –ù–∞ –ø–æ–∏—Å–∫–∏ –¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç. –ö—Ç–æ
          –Ω–∞–π–¥–µ—Ç –≤—Å–µ—Ö üê∞–ø–æ–ª—É—á–∏—Ç –ø—Ä–∏–∑, —Ç–æ—Ä–æ–ø–∏—Å—å –∏ —É–¥–∞—á–∏!
        </Typography>
        <Stack spacing={3} sx={{p: 3}}>
          <Box
            rowGap={3}
            columnGap={2}
            display="grid"
            gridTemplateColumns={{
              xs: 'repeat(1, 1fr)',
              sm: 'repeat(1, 1fr)',
            }}
            sx={{mt: 1}}
          >

            <ContTextField name='name' label="–ò–º—è"/>
            <ContTextField name='surname' label="–§–∞–º–∏–ª–∏—è"/>
            <Button type="submit" variant="contained">
              –ò–≥—Ä–∞—Ç—å
            </Button>
          </Box>
        </Stack>
      </Card>
    </Grid>
  </FormProvider>
</BasicModal>
  )
}

export default memo(RegisterModal)

type Props = {
  open:boolean
  handleClose: (name: string, surname: string) => void
}