import {memo} from "react";
import * as Yup from "yup";
import {useSnackbar} from "../components/snackbar/snackbar-provider.tsx";
import {SubmitHandler, useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import BasicModal from "../components/modal/modal.tsx";
import FormProvider, {ContTextField} from "../components/hook-form";
import Grid from "@mui/material/Grid2";
import {Button, Stack} from "@mui/material";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import {PATH} from "../app-settings.ts";
import {useNavigate} from "react-router-dom";

const schema = Yup
  .object({
    name: Yup.string().required('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è!').min(2, '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞!').max(10, '–ú–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!').matches(/^[–ê-–Ø–∞-—è–Å—ë\s]+$/, {message: '–ò—Å–ø–æ–ª—å–∑—É–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤!'}),
    surname: Yup.string().required('–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é!').min(1, '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª!').max(15, '–ú–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤!').matches(/^[–ê-–Ø–∞-—è–Å—ë\s]+$/, {message: '–ò—Å–ø–æ–ª—å–∑—É–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤!'}),
  })
  .required('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ!')

type FormData = Yup.InferType<typeof schema>

function RegisterModal({open, handleClose}: Props) {
  const {showSnackbar} = useSnackbar();
  const navigate = useNavigate()

  const methods = useForm<FormData>(
    {
      defaultValues: {
        name: '',
        surname: '',
      },
      resolver: yupResolver(schema),
    });

  const {handleSubmit} = methods

  const onSubmit: SubmitHandler<any> = data => {
    showSnackbar(`${data.name} ${data.surname} - –ø–æ–≥–Ω–∞–ª–∏! ü§™`, "success");
    handleClose(data.name, data.surname)
  }

  return (
    <BasicModal open={open}>
      <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
        <Grid container spacing={2}>
          <Box sx={{maxWidth: 400}}>
            <Typography id="modal-modal-title" variant="h6" component="h2" sx={{textAlign: 'center'}}>
              –ù–∞–π–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã üîéüéÅ
            </Typography>
            <Typography id="modal-modal-description" sx={{mt: 2, textAlign: 'center'}}>
              –ó–ê–î–ê–ù–ò–ï: –ù–∞–π—Ç–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ù–∞—à–µ–ª —Ç–æ, —á—Ç–æ –∏—â–µ—à—å, —Ç–∞–ø–∞–π –Ω–∞ —ç—Ç–æ
              —Å–∫–æ—Ä–µ–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ –ø–æ–ª—è –Ω–∏–∂–µ —Å–≤–æ—ë –ò–ú–Ø –∏ –§–ê–ú–ò–õ–ò–Æ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ‚òùüèª) –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ò–ì–†–ê–¢–¨. –ö—Ç–æ
              –Ω–∞–π–¥–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 12), –ø–æ–ª—É—á–∏—Ç –ø—Ä–∏–∑ üéÅ –≤ —ç—Ç—É —Å—É–±–±–æ—Ç—É –Ω–∞ –°omeONe. –ù–∞ –ø–æ–∏—Å–∫–∏ –¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥‚è±Ô∏è, –∞ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã. –¢–æ—Ä–æ–ø–∏—Å—å –∏ —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ!
            </Typography>
            <Stack spacing={3} sx={{p: 3}}>
              <Box
                rowGap={3}
                columnGap={2}
                display="grid"
                gridTemplateColumns={{
                  xs: 'repeat(1, 1fr)',
                  sm: 'repeat(1, 1fr)',
                }}
                sx={{mt: 1}}
              >

                <ContTextField name='name' label="–ò–º—è"/>
                <ContTextField name='surname' label="–§–∞–º–∏–ª–∏—è"/>
                <Button type="submit" variant="contained">
                  –ò–≥—Ä–∞—Ç—å
                </Button>
                <Button variant='outlined' color='warning' onClick={() => navigate(PATH.players)}>
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
                </Button>
              </Box>
            </Stack>
          </Box>
        </Grid>
      </FormProvider>
    </BasicModal>
  )
}

export default memo(RegisterModal)

type Props = {
  open: boolean
  handleClose: (name: string, surname: string) => void
}